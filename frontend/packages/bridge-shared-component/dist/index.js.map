{"version":3,"file":"index.js","sources":["../src/wallet/WalletChapi.ts","../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/sicpa-bridge/SicpaBridgeClient.ts","../src/credentials/anonCredentialIssuer.ts","../src/credentials/anonCredentialVerifier.ts"],"sourcesContent":["import * as polyfill from \"credential-handler-polyfill\"\nimport { BridgeClient } from \"../sicpa-bridge/BridgeClient\"\n\ninterface WalletCredential extends Credential {\n  readonly data: any\n}\ninterface WebCredentialWrapper extends Credential {\n  verifiableCredential: any\n  holder: string\n}\n\ninterface VerifiablePresentationWithCredential extends Credential {\n  readonly data: WebCredentialWrapper\n}\n\ninterface CredentialSubject {\n  id: string\n}\ninterface VerifiableCredential {\n  credentialSubject: CredentialSubject\n}\n\nexport class WalletChapi {\n  private bridgeClient: BridgeClient\n  private credPolifill: any\n\n  constructor(bridgeClient: BridgeClient) {\n    this.bridgeClient = bridgeClient\n  }\n\n  configure = async () => {\n    this.credPolifill = await polyfill.loadOnce()\n  }\n\n  connectToWallet = async (didAuthQuery: any) => {\n    const webCredential = await navigator.credentials.get(didAuthQuery)\n\n    if (webCredential == null) {\n      return\n    }\n    const { data: presentation } = webCredential as WalletCredential\n\n    const verification = await this.bridgeClient.verifyPresentation(\n      presentation\n    )\n\n    return verification.isOk() ? presentation : null\n  }\n\n  issueCredential = async (\n    presentation: any,\n    credential: any\n  ): Promise<boolean> => {\n\n    credential.issuanceDate = new Date().toISOString();\n\n    const webCredentialWrapper = presentation as WebCredentialWrapper\n    if (webCredentialWrapper == null) return false\n\n    const unSignedCredential = credential as VerifiableCredential\n    if (unSignedCredential == null) return false\n    unSignedCredential.credentialSubject.id = webCredentialWrapper.holder\n\n    const signedCredential = await this.bridgeClient.issueCredential(\n      unSignedCredential\n    )\n\n    if (signedCredential.isErr()) {\n      console.log(signedCredential.error)\n      return false\n    }\n\n    webCredentialWrapper.verifiableCredential = signedCredential.value\n\n    const webCredential = new this.credPolifill.WebCredential(\n      \"VerifiablePresentation\",\n      webCredentialWrapper\n    )\n\n    const result = await navigator.credentials.store(webCredential)\n\n    return result?.type === \"web\" || false\n  }\n\n  verifyCredential = async (credentialQuery: any): Promise<string[]> => {\n    const presentation = await navigator.credentials.get(credentialQuery)\n\n    if (presentation == null) return []\n\n    const {\n      data: presentationData,\n    } = presentation as VerifiablePresentationWithCredential\n\n    if (presentationData?.verifiableCredential == null) return []\n\n    const credential = presentationData.verifiableCredential[0]\n\n    console.log(\"extracted Credential:\", JSON.stringify(credential, null, 2))\n\n    const verification = await this.bridgeClient.verifyCredential(credential)\n\n    console.log(verification.isOk() ? verification.value : verification.error)\n\n    return verification.isOk() ? verification.value.checks : []\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import axios, { AxiosInstance } from \"axios\"\nimport { BridgeClient, VerificationResult } from \"./BridgeClient\"\nimport { ok, err, Result } from \"neverthrow\"\n\nexport class SicpaBridgeClient implements BridgeClient {\n  private httpClient: AxiosInstance\n\n  constructor(baseurl?: string) {\n    this.httpClient = axios.create({\n      baseURL: baseurl || process.env.REACT_APP_BRIDGE_API_URL,\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    })\n  }\n\n  verifyPresentation = async (body: any): Promise<Result<Boolean, Error>> => {\n    try {\n      const resp = await this.httpClient.post(\"/presentations/verify\", body)\n      return ok(resp.status === 200)\n    } catch (error) {\n      return err(error)\n    }\n  }\n\n  verifyCredential = async (\n    body: any\n  ): Promise<Result<VerificationResult, Error>> => {\n    try {\n      const resp = await this.httpClient.post(\"/credentials/verify\", body)\n      return resp.status === 200 ? ok(resp.data) : err(resp.data)\n    } catch (error) {\n      return err(error)\n    }\n  }\n\n  issueCredential = async (body: any): Promise<Result<any, Error>> => {\n    try {\n      const resp = await this.httpClient.post(\"/credentials/issue\", body)\n      return ok(resp.data)\n    } catch (error) {\n      return err(error)\n    }\n  }\n}\n","import { CredentialIssuer } from \"./credentialIssuer\"\nimport { ResultAsync, errAsync, okAsync } from \"neverthrow\"\nimport { CredentialsIssuanceApi } from \"bridge-api-client\"\n\nexport interface AnonCredCredential {\n  connectionId: string\n  schemaId: string\n  credentialDefinitionId: string\n  attributes: any\n}\n\nexport class AnonCredentialIsssuer implements CredentialIssuer {\n\n  issue = (\n    credential: any\n  ): ResultAsync<boolean, Error> => {\n\n    var anonCredential = credential as AnonCredCredential\n    if (anonCredential == null) return errAsync(Error(\"invalid credential\"))\n\n    const credApi = new CredentialsIssuanceApi({\n      basePath: process.env.REACT_APP_BRIDGE_API_URL,\n    })\n\n    console.log(anonCredential)\n\n    const credIssu = credApi\n      .issuanceCredentialPost({\n        connectionId: anonCredential.connectionId,\n        schemaId: anonCredential.schemaId,\n        credentialDefinitionId: anonCredential.credentialDefinitionId,\n        attributes: anonCredential.attributes,\n      })\n\n    const result = ResultAsync.fromPromise(credIssu, () => new Error(\"Could not issue credential\"))\n\n    return result.andThen( (issueReponse) => {\n        if(issueReponse.status === 200) {\n            return okAsync(true)\n        }\n        return errAsync(new Error(\"Could not issue credential\"))\n      }\n    )\n    \n  }\n}\n","import { VerificationsApi } from \"bridge-api-client\"\nimport { ResultAsync, errAsync, okAsync } from 'neverthrow'\n\nexport class AnonCredentialVerifier {\n\n    sendProof = (\n        connectionId: string,\n        verificationTemplateId: number\n        \n      ): ResultAsync<boolean, Error> => {\n\n        const verApi = new VerificationsApi({\n            basePath: process.env.REACT_APP_BRIDGE_API_URL,\n        })\n\n        const verIssu = verApi.verificationsPost(\n            {\n                connectionId: connectionId,\n                verificationTemplateId: verificationTemplateId\n            }\n        )\n\n        const result = ResultAsync.fromPromise(verIssu, () => new Error(\"Could not send verification\"))\n\n        return result.andThen( (issueReponse) => {\n            if(issueReponse.status === 200) {\n                return okAsync(true)\n            }\n            return errAsync(new Error(\"Could not send verification\"))\n        })\n\n    }\n\n}"],"names":["WalletChapi","bridgeClient","polyfill","credPolifill","didAuthQuery","navigator","credentials","get","webCredential","presentation","data","verifyPresentation","verification","isOk","credential","issuanceDate","Date","toISOString","webCredentialWrapper","unSignedCredential","credentialSubject","id","holder","issueCredential","signedCredential","isErr","console","log","error","verifiableCredential","value","WebCredential","store","result","type","credentialQuery","presentationData","JSON","stringify","verifyCredential","checks","_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","e","then","SicpaBridgeClient","baseurl","httpClient","post","resp","ok","status","err","axios","create","baseURL","process","env","REACT_APP_BRIDGE_API_URL","headers","AnonCredentialIsssuer","anonCredential","errAsync","Error","credApi","CredentialsIssuanceApi","basePath","credIssu","issuanceCredentialPost","connectionId","schemaId","credentialDefinitionId","attributes","ResultAsync","fromPromise","andThen","issueReponse","okAsync","AnonCredentialVerifier","verificationTemplateId","verApi","VerificationsApi","verIssu","verificationsPost"],"mappings":"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"}